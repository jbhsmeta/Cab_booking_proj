{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "cab_Booking_Optimal.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dhUPkz5wBFZQ"
      },
      "source": [
        "##CAB BOOKING - MID TERM PROJECT 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8WT-zd9tBMEA"
      },
      "source": [
        "**Import Required Libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5iYaPg__BEVA"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import datetime\r\n",
        "import calendar\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "%matplotlib inline\r\n",
        "import seaborn as sns\r\n",
        "from pandas_profiling import ProfileReport"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "83nRBoYYBKvP"
      },
      "source": [
        "pd.set_option('display.max_columns',40)\r\n",
        "pd.set_option('display.width',1000)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6fxg5jrCBlje"
      },
      "source": [
        "#Fetching the Train Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hxPTRXI4BVvP"
      },
      "source": [
        "df_train = pd.read_csv('/content/train.csv')\r\n",
        "df_train_label = pd.read_csv('/content/train_label.csv')\r\n",
        "df_train['Total_Booking'] = df_train_label\r\n",
        "\r\n",
        "\r\n",
        "# print(df_train.head())\r\n",
        "# print(df_train.shape)"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "wN0qjjxdQPCW",
        "outputId": "7239a80f-0e68-433b-bc5e-445b2e4f14ba"
      },
      "source": [
        "df_train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>Total_Booking</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5/2/2012 19:00</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>22.14</td>\n",
              "      <td>25.760</td>\n",
              "      <td>77</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9/5/2012 4:00</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>28.70</td>\n",
              "      <td>33.335</td>\n",
              "      <td>79</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/13/2011 9:00</td>\n",
              "      <td>Spring</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>209.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11/18/2011 16:00</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>13.94</td>\n",
              "      <td>16.665</td>\n",
              "      <td>29</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9/13/2011 13:00</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>30.34</td>\n",
              "      <td>33.335</td>\n",
              "      <td>51</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>791.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8703</th>\n",
              "      <td>1/16/2012 6:00</td>\n",
              "      <td>Spring</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>4.10</td>\n",
              "      <td>6.820</td>\n",
              "      <td>54</td>\n",
              "      <td>6.0032</td>\n",
              "      <td>11.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8704</th>\n",
              "      <td>11/10/2011 1:00</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Mist + Cloudy</td>\n",
              "      <td>16.40</td>\n",
              "      <td>20.455</td>\n",
              "      <td>87</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8705</th>\n",
              "      <td>4/12/2011 3:00</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Mist + Cloudy</td>\n",
              "      <td>23.78</td>\n",
              "      <td>27.275</td>\n",
              "      <td>56</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>92.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8706</th>\n",
              "      <td>11/7/2012 1:00</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Mist + Cloudy</td>\n",
              "      <td>11.48</td>\n",
              "      <td>13.635</td>\n",
              "      <td>61</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>31.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8707</th>\n",
              "      <td>1/10/2011 10:00</td>\n",
              "      <td>Spring</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Mist + Cloudy</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>19.9995</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8708 rows Ã— 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              datetime  season  holiday  workingday              weather   temp   atemp  humidity  windspeed  Total_Booking\n",
              "0       5/2/2012 19:00  Summer        0           1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0\n",
              "1        9/5/2012 4:00    Fall        0           1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0\n",
              "2       1/13/2011 9:00  Spring        0           1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0\n",
              "3     11/18/2011 16:00  Winter        0           1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0\n",
              "4      9/13/2011 13:00    Fall        0           1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0\n",
              "...                ...     ...      ...         ...                  ...    ...     ...       ...        ...            ...\n",
              "8703    1/16/2012 6:00  Spring        1           0   Clear + Few clouds   4.10   6.820        54     6.0032           11.0\n",
              "8704   11/10/2011 1:00  Winter        0           1       Mist + Cloudy   16.40  20.455        87     0.0000            1.0\n",
              "8705    4/12/2011 3:00  Summer        0           1       Mist + Cloudy   23.78  27.275        56     8.9981           92.0\n",
              "8706    11/7/2012 1:00  Winter        0           1       Mist + Cloudy   11.48  13.635        61    16.9979           31.0\n",
              "8707   1/10/2011 10:00  Spring        0           1       Mist + Cloudy    5.74   6.060        50    19.9995            NaN\n",
              "\n",
              "[8708 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GRyUNqdbCIw9"
      },
      "source": [
        "#Fetch the Test Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HHWUNp0bCLhI",
        "outputId": "0a0e8707-e7cb-402b-e22c-8c8a37bc3308"
      },
      "source": [
        "df_test = pd.read_csv('/content/test.csv')\r\n",
        "df_test_label = pd.read_csv('/content/test_label.csv')\r\n",
        "df_test['Total_Booking'] = df_test_label\r\n",
        "print(df_test.head())\r\n",
        "print(df_test.shape)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "           datetime  season  holiday  workingday                  weather   temp   atemp  humidity  windspeed  Total_Booking\n",
            "0   5/10/2012 11:00  Summer        0           1       Clear + Few clouds  21.32  25.000        48    35.0008           87.0\n",
            "1     6/9/2012 7:00  Summer        0           0       Clear + Few clouds  23.78  27.275        64     7.0015           11.0\n",
            "2    3/6/2011 20:00  Spring        0           0   Light Snow, Light Rain  11.48  12.120       100    27.9993           84.0\n",
            "3  10/13/2011 11:00  Winter        0           1           Mist + Cloudy   25.42  28.790        83     0.0000          668.0\n",
            "4    6/2/2012 12:00  Summer        0           0       Clear + Few clouds  25.42  31.060        43    23.9994           53.0\n",
            "(2178, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aHAxWSi0CeUG"
      },
      "source": [
        "#Check for any redundancies in the data wrt Holiday and Working Day"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LK-jky6JCl-V",
        "outputId": "73a98893-b108-4efa-9332-b3b37c1b0c6d"
      },
      "source": [
        "df_new_train_1 = df_train[(df_train['holiday']==1)&(df_train['workingday']==1)]\r\n",
        "print(df_new_train_1)\r\n",
        "\r\n",
        "df_new_test_1 = df_test[(df_test['holiday']==1)&(df_test['workingday']==1)]\r\n",
        "print(df_new_test_1)\r\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Empty DataFrame\n",
            "Columns: [datetime, season, holiday, workingday, weather, temp, atemp, humidity, windspeed, Total_Booking]\n",
            "Index: []\n",
            "Empty DataFrame\n",
            "Columns: [datetime, season, holiday, workingday, weather, temp, atemp, humidity, windspeed, Total_Booking]\n",
            "Index: []\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iNlPFjSHEmC_"
      },
      "source": [
        "#Date Time Split"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KWBzK5JMEr9E"
      },
      "source": [
        "Extract Date and Store in Date Column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ffKXCb65Eo64"
      },
      "source": [
        "df_train['Date'] = df_train.datetime.apply(lambda x: x.split()[0])\r\n",
        "df_test['Date'] = df_test.datetime.apply(lambda x: x.split()[0])\r\n",
        "#train['date'] = train.datetime.apply(lambda x : x.split()[0])"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F7lAc0xvE1NA"
      },
      "source": [
        "Extracting time and storing in time Column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tz9xktFkE3VH"
      },
      "source": [
        "  # df_train['Time'] = df_train['datetime'].apply(lambda x: x.split()[1])\r\n",
        "  # df_test['Time'] = df_test['datetime'].apply(lambda x: x.split()[1])\r\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PTmlTysbLyIu"
      },
      "source": [
        "Extract Hours"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S2jO2t-nLzm9"
      },
      "source": [
        "df_train['Hours'] = df_train.datetime.apply(lambda x : x.split()[1].split(\":\")[0])\r\n",
        "df_test['Hours'] = df_test.datetime.apply(lambda x : x.split()[1].split(\":\")[0])"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVQVSPINE-zb"
      },
      "source": [
        "Extract Weekday"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_ALiHRRbFAMs"
      },
      "source": [
        "from datetime import datetime\r\n",
        "df_train['Weekday'] = df_train['Date'].apply(lambda dateString : calendar.day_name[datetime.strptime(dateString,\"%m/%d/%Y\").weekday()])\r\n",
        "df_test['Weekday'] = df_test['Date'].apply(lambda dateString : calendar.day_name[datetime.strptime(dateString,\"%m/%d/%Y\").weekday()])"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wGEv3exvFEMn"
      },
      "source": [
        "Extracting Month Name"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VclkUaf0FHIA"
      },
      "source": [
        "df_train['Month'] = df_train['Date'].apply(lambda dateString : calendar.month_name[datetime.strptime(dateString,\"%m/%d/%Y\").month])\r\n",
        "\r\n",
        "df_test['Month'] = df_test['Date'].apply(lambda dateString : calendar.month_name[datetime.strptime(dateString,\"%m/%d/%Y\").month])\r\n"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LDAh6eIULK7g"
      },
      "source": [
        "**Extract Year**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hSatzoeMLNot",
        "outputId": "4d5882e6-b5d5-4adc-c3dd-66f0cfee3e7c"
      },
      "source": [
        "# df_train['Year'] = pd.DatetimeIndex(df_train['Date']).year\r\n",
        "# df_test['Year'] = pd.DatetimeIndex(df_test['Date']).year\r\n",
        "print(df_train.head())\r\n",
        "print(df_test.head())\r\n",
        "#print(df_train['Time'].unique())"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "           datetime  season  holiday  workingday              weather   temp   atemp  humidity  windspeed  Total_Booking        Date Hours    Weekday      Month\n",
            "0    5/2/2012 19:00  Summer        0           1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0    5/2/2012    19  Wednesday        May\n",
            "1     9/5/2012 4:00    Fall        0           1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0    9/5/2012     4  Wednesday  September\n",
            "2    1/13/2011 9:00  Spring        0           1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0   1/13/2011     9   Thursday    January\n",
            "3  11/18/2011 16:00  Winter        0           1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0  11/18/2011    16     Friday   November\n",
            "4   9/13/2011 13:00    Fall        0           1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0   9/13/2011    13    Tuesday  September\n",
            "           datetime  season  holiday  workingday                  weather   temp   atemp  humidity  windspeed  Total_Booking        Date Hours   Weekday    Month\n",
            "0   5/10/2012 11:00  Summer        0           1       Clear + Few clouds  21.32  25.000        48    35.0008           87.0   5/10/2012    11  Thursday      May\n",
            "1     6/9/2012 7:00  Summer        0           0       Clear + Few clouds  23.78  27.275        64     7.0015           11.0    6/9/2012     7  Saturday     June\n",
            "2    3/6/2011 20:00  Spring        0           0   Light Snow, Light Rain  11.48  12.120       100    27.9993           84.0    3/6/2011    20    Sunday    March\n",
            "3  10/13/2011 11:00  Winter        0           1           Mist + Cloudy   25.42  28.790        83     0.0000          668.0  10/13/2011    11  Thursday  October\n",
            "4    6/2/2012 12:00  Summer        0           0       Clear + Few clouds  25.42  31.060        43    23.9994           53.0    6/2/2012    12  Saturday     June\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ilFf5bx2QaUN",
        "outputId": "105f1deb-9555-4012-8482-ad8c4d81429f"
      },
      "source": [
        "df_train.columns"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['datetime', 'season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'Total_Booking', 'Date', 'Hours', 'Weekday', 'Month'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LIPDLLpvQJ0U"
      },
      "source": [
        "**Extract Hours from Timestamp**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VWdcZdmHQO5p"
      },
      "source": [
        "# #Convert the datetime column to datetime object\r\n",
        "# df_train['datetime'] = pd.to_datetime(df_train['datetime'])\r\n",
        "# df_test['datetime'] = pd.to_datetime(df_test['datetime'])\r\n",
        "# # print(df_train.head())\r\n",
        "\r\n",
        "# df_train['Hours'] = pd.cut(df_train.datetime.dt.hour,bins = [0,6,10,12,17,20,23],labels=['Early Morning','Office Hour','Morning','Afternoon','Return From Office','Late Night'],right=True,include_lowest=True) \r\n",
        "# df_test['Hours'] = pd.cut(df_test.datetime.dt.hour,bins = [0,6,10,12,17,20,23],labels=['Early Morning','Office Hour','Morning','Afternoon','Return From Office','Late Night'],right = True,include_lowest=True) \r\n",
        "# # print(df_train.head())\r\n",
        "# print(df_train.Time.unique())\r\n",
        "# print(df_train.Hours.unique())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RYTCqcUEFaCb"
      },
      "source": [
        "#Drop Datetime Column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TZXbzzU3FLsw",
        "outputId": "5d3f37ee-8ee3-4404-983f-5391d6078d4e"
      },
      "source": [
        "df_train.drop(columns=['datetime'],inplace=True)\r\n",
        "df_test.drop(columns=['datetime'],inplace=True)\r\n",
        "print(df_train.head())\r\n",
        "print(df_test.head())"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   season  holiday  workingday              weather   temp   atemp  humidity  windspeed  Total_Booking        Date Hours    Weekday      Month\n",
            "0  Summer        0           1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0    5/2/2012    19  Wednesday        May\n",
            "1    Fall        0           1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0    9/5/2012     4  Wednesday  September\n",
            "2  Spring        0           1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0   1/13/2011     9   Thursday    January\n",
            "3  Winter        0           1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0  11/18/2011    16     Friday   November\n",
            "4    Fall        0           1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0   9/13/2011    13    Tuesday  September\n",
            "   season  holiday  workingday                  weather   temp   atemp  humidity  windspeed  Total_Booking        Date Hours   Weekday    Month\n",
            "0  Summer        0           1       Clear + Few clouds  21.32  25.000        48    35.0008           87.0   5/10/2012    11  Thursday      May\n",
            "1  Summer        0           0       Clear + Few clouds  23.78  27.275        64     7.0015           11.0    6/9/2012     7  Saturday     June\n",
            "2  Spring        0           0   Light Snow, Light Rain  11.48  12.120       100    27.9993           84.0    3/6/2011    20    Sunday    March\n",
            "3  Winter        0           1           Mist + Cloudy   25.42  28.790        83     0.0000          668.0  10/13/2011    11  Thursday  October\n",
            "4  Summer        0           0       Clear + Few clouds  25.42  31.060        43    23.9994           53.0    6/2/2012    12  Saturday     June\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H7wlRrt8Ff4J"
      },
      "source": [
        "Rearrange the order of the columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qO69zRkYFkkD"
      },
      "source": [
        "df_train = df_train[['Month','Weekday','Hours','season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'Total_Booking']]\r\n",
        "df_test = df_test[['Month','Weekday','Hours','season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'Total_Booking']]"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hPn8h-qmFvgg",
        "outputId": "70de436f-6008-4b07-95e2-5dd58b95f9b7"
      },
      "source": [
        "print(df_train.head(),'\\n')\r\n",
        "print(df_test.head())"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "       Month    Weekday Hours  season  holiday  workingday              weather   temp   atemp  humidity  windspeed  Total_Booking\n",
            "0        May  Wednesday    19  Summer        0           1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0\n",
            "1  September  Wednesday     4    Fall        0           1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0\n",
            "2    January   Thursday     9  Spring        0           1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0\n",
            "3   November     Friday    16  Winter        0           1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0\n",
            "4  September    Tuesday    13    Fall        0           1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0 \n",
            "\n",
            "     Month   Weekday Hours  season  holiday  workingday                  weather   temp   atemp  humidity  windspeed  Total_Booking\n",
            "0      May  Thursday    11  Summer        0           1       Clear + Few clouds  21.32  25.000        48    35.0008           87.0\n",
            "1     June  Saturday     7  Summer        0           0       Clear + Few clouds  23.78  27.275        64     7.0015           11.0\n",
            "2    March    Sunday    20  Spring        0           0   Light Snow, Light Rain  11.48  12.120       100    27.9993           84.0\n",
            "3  October  Thursday    11  Winter        0           1           Mist + Cloudy   25.42  28.790        83     0.0000          668.0\n",
            "4     June  Saturday    12  Summer        0           0       Clear + Few clouds  25.42  31.060        43    23.9994           53.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h8A9Mrd2F3zy"
      },
      "source": [
        "Infos about the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AxZ0ujXkF8s7",
        "outputId": "bd413118-0424-46ca-f5a3-02dca10da878"
      },
      "source": [
        "print('\\n$$$$$$$$$$$$$$$$$$$$$Train$$$$$$$$$$$$$$$$$$$$$$$$$')\r\n",
        "print(df_train.info())\r\n",
        "print('***************************Test******************************\\n')\r\n",
        "print(df_test.info())\r\n",
        "print('\\n#######################Train####################################\\n')\r\n",
        "print(df_train.describe())\r\n",
        "print('\\n***********************Test**************************************\\n')\r\n",
        "print(df_test.describe())"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "$$$$$$$$$$$$$$$$$$$$$Train$$$$$$$$$$$$$$$$$$$$$$$$$\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8708 entries, 0 to 8707\n",
            "Data columns (total 12 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Month          8708 non-null   object \n",
            " 1   Weekday        8708 non-null   object \n",
            " 2   Hours          8708 non-null   object \n",
            " 3   season         8708 non-null   object \n",
            " 4   holiday        8708 non-null   int64  \n",
            " 5   workingday     8708 non-null   int64  \n",
            " 6   weather        8708 non-null   object \n",
            " 7   temp           8708 non-null   float64\n",
            " 8   atemp          8708 non-null   float64\n",
            " 9   humidity       8708 non-null   int64  \n",
            " 10  windspeed      8708 non-null   float64\n",
            " 11  Total_Booking  8707 non-null   float64\n",
            "dtypes: float64(4), int64(3), object(5)\n",
            "memory usage: 816.5+ KB\n",
            "None\n",
            "***************************Test******************************\n",
            "\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2178 entries, 0 to 2177\n",
            "Data columns (total 12 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Month          2178 non-null   object \n",
            " 1   Weekday        2178 non-null   object \n",
            " 2   Hours          2178 non-null   object \n",
            " 3   season         2178 non-null   object \n",
            " 4   holiday        2178 non-null   int64  \n",
            " 5   workingday     2178 non-null   int64  \n",
            " 6   weather        2178 non-null   object \n",
            " 7   temp           2178 non-null   float64\n",
            " 8   atemp          2178 non-null   float64\n",
            " 9   humidity       2178 non-null   int64  \n",
            " 10  windspeed      2178 non-null   float64\n",
            " 11  Total_Booking  2177 non-null   float64\n",
            "dtypes: float64(4), int64(3), object(5)\n",
            "memory usage: 204.3+ KB\n",
            "None\n",
            "\n",
            "#######################Train####################################\n",
            "\n",
            "           holiday   workingday         temp        atemp     humidity    windspeed  Total_Booking\n",
            "count  8708.000000  8708.000000  8708.000000  8708.000000  8708.000000  8708.000000    8707.000000\n",
            "mean      0.028480     0.680294    20.243020    23.655552    61.649173    12.843891     192.971287\n",
            "std       0.166348     0.466389     7.813494     8.501107    19.199578     8.190314     181.532038\n",
            "min       0.000000     0.000000     0.820000     0.760000     0.000000     0.000000       1.000000\n",
            "25%       0.000000     0.000000    13.940000    16.665000    46.000000     7.001500      43.000000\n",
            "50%       0.000000     1.000000    20.500000    24.240000    61.000000    12.998000     148.000000\n",
            "75%       0.000000     1.000000    26.240000    31.060000    77.000000    16.997900     286.000000\n",
            "max       1.000000     1.000000    41.000000    45.455000   100.000000    56.996900     977.000000\n",
            "\n",
            "***********************Test**************************************\n",
            "\n",
            "           holiday   workingday         temp        atemp     humidity    windspeed  Total_Booking\n",
            "count  2178.000000  2178.000000  2178.000000  2178.000000  2178.000000  2178.000000    2177.000000\n",
            "mean      0.028926     0.683196    20.182241    23.653214    62.835170    12.621496     185.813045\n",
            "std       0.167636     0.465337     7.704978     8.369721    19.401161     8.060062     179.466907\n",
            "min       0.000000     0.000000     3.280000     3.790000     0.000000     0.000000       1.000000\n",
            "25%       0.000000     0.000000    13.940000    16.665000    48.000000     7.001500      38.000000\n",
            "50%       0.000000     1.000000    20.500000    24.240000    63.000000    11.001400     136.000000\n",
            "75%       0.000000     1.000000    26.240000    31.060000    78.000000    16.997900     277.000000\n",
            "max       1.000000     1.000000    38.540000    44.695000   100.000000    56.996900     901.000000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O6G_MdfFRUb1"
      },
      "source": [
        "categoryVariableList = [\"Hours\",\"Weekday\",\"Month\",\"season\",\"weather\",\"holiday\",\"workingday\"]\r\n",
        "for var in categoryVariableList:\r\n",
        "    df_train[var] = df_train[var].astype('category')\r\n",
        "    df_test[var] = df_test[var].astype('category')"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bBUkVbbARsRf"
      },
      "source": [
        "##Skewness in the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "sIgMr8ZORuds",
        "outputId": "de622d1e-438f-451e-dd80-14aa896d6808"
      },
      "source": [
        "import missingno as msno\r\n",
        "msno.matrix(df_train,figsize=(12,5))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f218eef56d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e8copHU8R8Xg"
      },
      "source": [
        "##Outliers Analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "id": "or690z7sR92k",
        "outputId": "d12dc110-ced3-49c4-e0be-cf5d64ca4788"
      },
      "source": [
        "import seaborn as sn\r\n",
        "fig, axes = plt.subplots(nrows=2,ncols=2)\r\n",
        "fig.set_size_inches(12, 10)\r\n",
        "sn.boxplot(data=df_train,y=\"Total_Booking\",orient=\"v\",ax=axes[0][0])\r\n",
        "sn.boxplot(data=df_train,y=\"Total_Booking\",x=\"season\",orient=\"v\",ax=axes[0][1])\r\n",
        "sn.boxplot(data=df_train,y=\"Total_Booking\",x=\"Hours\",orient=\"v\",ax=axes[1][0])\r\n",
        "sn.boxplot(data=df_train,y=\"Total_Booking\",x=\"workingday\",orient=\"v\",ax=axes[1][1])\r\n",
        "\r\n",
        "axes[0][0].set(ylabel='Total_Booking',title=\"Box Plot On Count\")\r\n",
        "axes[0][1].set(xlabel='Season', ylabel='Total_booking',title=\"Box Plot On total booking Across Season\")\r\n",
        "axes[1][0].set(xlabel='Hour Of The Day', ylabel='Total_booking',title=\"Box Plot On total booking Across Hour Of The Day\")\r\n",
        "axes[1][1].set(xlabel='Working Day', ylabel='Total_booking',title=\"Box Plot On total booking Across Working Day\")"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Total_booking'),\n",
              " Text(0.5, 0, 'Working Day'),\n",
              " Text(0.5, 1.0, 'Box Plot On total booking Across Working Day')]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qhwemEt1R95R"
      },
      "source": [
        "## Removing outliers\r\n",
        "trainWithoutOutliers = df_train[np.abs(df_train[\"Total_Booking\"]-df_train[\"Total_Booking\"].mean())<=(3*df_train[\"Total_Booking\"].std())]"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "id": "cZgGCoA8R98k",
        "outputId": "245614ee-883f-4bf2-9319-b31f1b3cdfb8"
      },
      "source": [
        "trainWithoutOutliers.head()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Month</th>\n",
              "      <th>Weekday</th>\n",
              "      <th>Hours</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>Total_Booking</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>May</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>19</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>22.14</td>\n",
              "      <td>25.760</td>\n",
              "      <td>77</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>September</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>28.70</td>\n",
              "      <td>33.335</td>\n",
              "      <td>79</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>January</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>9</td>\n",
              "      <td>Spring</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>209.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>November</td>\n",
              "      <td>Friday</td>\n",
              "      <td>16</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>13.94</td>\n",
              "      <td>16.665</td>\n",
              "      <td>29</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>August</td>\n",
              "      <td>Friday</td>\n",
              "      <td>17</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>33.62</td>\n",
              "      <td>12.120</td>\n",
              "      <td>36</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>395.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Month    Weekday Hours  season holiday workingday              weather   temp   atemp  humidity  windspeed  Total_Booking\n",
              "0        May  Wednesday    19  Summer       0          1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0\n",
              "1  September  Wednesday     4    Fall       0          1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0\n",
              "2    January   Thursday     9  Spring       0          1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0\n",
              "3   November     Friday    16  Winter       0          1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0\n",
              "5     August     Friday    17    Fall       0          1   Clear + Few clouds  33.62  12.120        36    22.0028          395.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZvhiPmL0NEsT"
      },
      "source": [
        "#Encode the Object Datas"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "id": "uDBYbQdIS59D",
        "outputId": "72417811-abcb-4f4d-e094-17766cdb177b"
      },
      "source": [
        "fullData = df_train.append(df_test, sort=False)\r\n",
        "fullData.reset_index(inplace=True)\r\n",
        "fullData.drop('index',inplace=True,axis=1)\r\n",
        "fullData.shape\r\n",
        "fullData.head()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Month</th>\n",
              "      <th>Weekday</th>\n",
              "      <th>Hours</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>Total_Booking</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>May</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>19</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>22.14</td>\n",
              "      <td>25.760</td>\n",
              "      <td>77</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>September</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>28.70</td>\n",
              "      <td>33.335</td>\n",
              "      <td>79</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>January</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>9</td>\n",
              "      <td>Spring</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>209.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>November</td>\n",
              "      <td>Friday</td>\n",
              "      <td>16</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>13.94</td>\n",
              "      <td>16.665</td>\n",
              "      <td>29</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>September</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>13</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>30.34</td>\n",
              "      <td>33.335</td>\n",
              "      <td>51</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>791.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Month    Weekday Hours  season holiday workingday              weather   temp   atemp  humidity  windspeed  Total_Booking\n",
              "0        May  Wednesday    19  Summer       0          1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0\n",
              "1  September  Wednesday     4    Fall       0          1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0\n",
              "2    January   Thursday     9  Spring       0          1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0\n",
              "3   November     Friday    16  Winter       0          1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0\n",
              "4  September    Tuesday    13    Fall       0          1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nZYI90NXS6Io",
        "outputId": "0cd0ebf4-2885-4954-ba64-420690d24633"
      },
      "source": [
        "categoryVariableList = [\"Hours\",\"Weekday\",\"Month\",\"season\",\"weather\",\"holiday\",\"workingday\"]\r\n",
        "for var in categoryVariableList:\r\n",
        "    fullData[var] = fullData[var].astype('category')\r\n",
        "fullData.dtypes"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Month            category\n",
              "Weekday          category\n",
              "Hours            category\n",
              "season           category\n",
              "holiday          category\n",
              "workingday       category\n",
              "weather          category\n",
              "temp              float64\n",
              "atemp             float64\n",
              "humidity            int64\n",
              "windspeed         float64\n",
              "Total_Booking     float64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uOTg7Fh3S6K8"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9hqSgFKAZi8V"
      },
      "source": [
        "season=pd.get_dummies(fullData['season'])\r\n",
        "fullData=pd.concat([fullData,season],axis=1)\r\n",
        "\r\n",
        "weather=pd.get_dummies(fullData['weather'])\r\n",
        "fullData=pd.concat([fullData,weather],axis=1)\r\n",
        "\r\n",
        "weekday=pd.get_dummies(fullData['Weekday'])\r\n",
        "fullData=pd.concat([fullData,weekday],axis=1)\r\n",
        "\r\n",
        "month=pd.get_dummies(fullData['Month'])\r\n",
        "fullData=pd.concat([fullData,month],axis=1)\r\n",
        "\r\n"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "dfFk8iSWTbhn",
        "outputId": "81baf470-bfd9-4887-fde9-d8d61fde8a97"
      },
      "source": [
        "fullData.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Month</th>\n",
              "      <th>Weekday</th>\n",
              "      <th>Hours</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>Total_Booking</th>\n",
              "      <th>Fall</th>\n",
              "      <th>Spring</th>\n",
              "      <th>Summer</th>\n",
              "      <th>Winter</th>\n",
              "      <th>Clear + Few clouds</th>\n",
              "      <th>Heavy Rain + Thunderstorm</th>\n",
              "      <th>Light Snow, Light Rain</th>\n",
              "      <th>Mist + Cloudy</th>\n",
              "      <th>Friday</th>\n",
              "      <th>Monday</th>\n",
              "      <th>Saturday</th>\n",
              "      <th>Sunday</th>\n",
              "      <th>Thursday</th>\n",
              "      <th>Tuesday</th>\n",
              "      <th>Wednesday</th>\n",
              "      <th>April</th>\n",
              "      <th>August</th>\n",
              "      <th>December</th>\n",
              "      <th>February</th>\n",
              "      <th>January</th>\n",
              "      <th>July</th>\n",
              "      <th>June</th>\n",
              "      <th>March</th>\n",
              "      <th>May</th>\n",
              "      <th>November</th>\n",
              "      <th>October</th>\n",
              "      <th>September</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>May</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>19</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>22.14</td>\n",
              "      <td>25.760</td>\n",
              "      <td>77</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>September</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>28.70</td>\n",
              "      <td>33.335</td>\n",
              "      <td>79</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>139.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>January</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>9</td>\n",
              "      <td>Spring</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>209.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>November</td>\n",
              "      <td>Friday</td>\n",
              "      <td>16</td>\n",
              "      <td>Winter</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>13.94</td>\n",
              "      <td>16.665</td>\n",
              "      <td>29</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>September</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>13</td>\n",
              "      <td>Fall</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear + Few clouds</td>\n",
              "      <td>30.34</td>\n",
              "      <td>33.335</td>\n",
              "      <td>51</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>791.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Month    Weekday Hours  season holiday workingday              weather   temp   atemp  humidity  windspeed  Total_Booking  Fall  Spring  Summer  Winter   Clear + Few clouds   Heavy Rain + Thunderstorm    Light Snow, Light Rain   Mist + Cloudy   Friday  Monday  Saturday  Sunday  Thursday  Tuesday  Wednesday  April  August  December  February  January  July  June  March  May  November  October  September\n",
              "0        May  Wednesday    19  Summer       0          1   Clear + Few clouds  22.14  25.760        77    16.9979            5.0     0       0       1       0                    1                            0                        0                0       0       0         0       0         0        0          1      0       0         0         0        0     0     0      0    1         0        0          0\n",
              "1  September  Wednesday     4    Fall       0          1   Clear + Few clouds  28.70  33.335        79    19.0012          139.0     1       0       0       0                    1                            0                        0                0       0       0         0       0         0        0          1      0       0         0         0        0     0     0      0    0         0        0          1\n",
              "2    January   Thursday     9  Spring       0          1   Clear + Few clouds   5.74   6.060        50    22.0028          209.0     0       1       0       0                    1                            0                        0                0       0       0         0       0         1        0          0      0       0         0         0        1     0     0      0    0         0        0          0\n",
              "3   November     Friday    16  Winter       0          1   Clear + Few clouds  13.94  16.665        29     8.9981          184.0     0       0       0       1                    1                            0                        0                0       1       0         0       0         0        0          0      0       0         0         0        0     0     0      0    0         1        0          0\n",
              "4  September    Tuesday    13    Fall       0          1   Clear + Few clouds  30.34  33.335        51    19.0012          791.0     1       0       0       0                    1                            0                        0                0       0       0         0       0         0        1          0      0       0         0         0        0     0     0      0    0         0        0          1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "id": "SAxyWJOIToJk",
        "outputId": "2230aaa4-a128-47a6-9982-54467c1c35ec"
      },
      "source": [
        "fullData.drop(['season','weather', 'Weekday','Month' ],inplace=True,axis=1)\r\n",
        "fullData.head()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>Total_Booking</th>\n",
              "      <th>Fall</th>\n",
              "      <th>Spring</th>\n",
              "      <th>Summer</th>\n",
              "      <th>Winter</th>\n",
              "      <th>Clear + Few clouds</th>\n",
              "      <th>Heavy Rain + Thunderstorm</th>\n",
              "      <th>Light Snow, Light Rain</th>\n",
              "      <th>Mist + Cloudy</th>\n",
              "      <th>Friday</th>\n",
              "      <th>Monday</th>\n",
              "      <th>Saturday</th>\n",
              "      <th>Sunday</th>\n",
              "      <th>Thursday</th>\n",
              "      <th>Tuesday</th>\n",
              "      <th>Wednesday</th>\n",
              "      <th>April</th>\n",
              "      <th>August</th>\n",
              "      <th>December</th>\n",
              "      <th>February</th>\n",
              "      <th>January</th>\n",
              "      <th>July</th>\n",
              "      <th>June</th>\n",
              "      <th>March</th>\n",
              "      <th>May</th>\n",
              "      <th>November</th>\n",
              "      <th>October</th>\n",
              "      <th>September</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>22.14</td>\n",
              "      <td>25.760</td>\n",
              "      <td>77</td>\n",
              "      <td>16.9979</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>28.70</td>\n",
              "      <td>33.335</td>\n",
              "      <td>79</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>139.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5.74</td>\n",
              "      <td>6.060</td>\n",
              "      <td>50</td>\n",
              "      <td>22.0028</td>\n",
              "      <td>209.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>13.94</td>\n",
              "      <td>16.665</td>\n",
              "      <td>29</td>\n",
              "      <td>8.9981</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>30.34</td>\n",
              "      <td>33.335</td>\n",
              "      <td>51</td>\n",
              "      <td>19.0012</td>\n",
              "      <td>791.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Hours holiday workingday   temp   atemp  humidity  windspeed  Total_Booking  Fall  Spring  Summer  Winter   Clear + Few clouds   Heavy Rain + Thunderstorm    Light Snow, Light Rain   Mist + Cloudy   Friday  Monday  Saturday  Sunday  Thursday  Tuesday  Wednesday  April  August  December  February  January  July  June  March  May  November  October  September\n",
              "0    19       0          1  22.14  25.760        77    16.9979            5.0     0       0       1       0                    1                            0                        0                0       0       0         0       0         0        0          1      0       0         0         0        0     0     0      0    1         0        0          0\n",
              "1     4       0          1  28.70  33.335        79    19.0012          139.0     1       0       0       0                    1                            0                        0                0       0       0         0       0         0        0          1      0       0         0         0        0     0     0      0    0         0        0          1\n",
              "2     9       0          1   5.74   6.060        50    22.0028          209.0     0       1       0       0                    1                            0                        0                0       0       0         0       0         1        0          0      0       0         0         0        1     0     0      0    0         0        0          0\n",
              "3    16       0          1  13.94  16.665        29     8.9981          184.0     0       0       0       1                    1                            0                        0                0       1       0         0       0         0        0          0      0       0         0         0        0     0     0      0    0         1        0          0\n",
              "4    13       0          1  30.34  33.335        51    19.0012          791.0     1       0       0       0                    1                            0                        0                0       0       0         0       0         0        1          0      0       0         0         0        0     0     0      0    0         0        0          1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4OKY7NwY4zRa",
        "outputId": "02b8d735-9877-4741-9feb-283e564362fc"
      },
      "source": [
        "fullData.isnull().any()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Hours                          False\n",
              "holiday                        False\n",
              "workingday                     False\n",
              "temp                           False\n",
              "atemp                          False\n",
              "humidity                       False\n",
              "windspeed                      False\n",
              "Total_Booking                   True\n",
              "Fall                           False\n",
              "Spring                         False\n",
              "Summer                         False\n",
              "Winter                         False\n",
              " Clear + Few clouds            False\n",
              " Heavy Rain + Thunderstorm     False\n",
              " Light Snow, Light Rain        False\n",
              " Mist + Cloudy                 False\n",
              "Friday                         False\n",
              "Monday                         False\n",
              "Saturday                       False\n",
              "Sunday                         False\n",
              "Thursday                       False\n",
              "Tuesday                        False\n",
              "Wednesday                      False\n",
              "April                          False\n",
              "August                         False\n",
              "December                       False\n",
              "February                       False\n",
              "January                        False\n",
              "July                           False\n",
              "June                           False\n",
              "March                          False\n",
              "May                            False\n",
              "November                       False\n",
              "October                        False\n",
              "September                      False\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x8x_rLoWToMR"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "train = fullData[:df_train.shape[0]]\r\n",
        "test = fullData[df_train.shape[0]:]"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Dlfu0x0ToPt"
      },
      "source": [
        "x_train,x_dev,y_train,y_dev =train_test_split(train.drop('Total_Booking',axis=1),train['Total_Booking'],test_size=0.20,random_state=42)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NkfW29nJToSc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "731bd46a-6f76-47cd-f721-37a4ad91f216"
      },
      "source": [
        "train.shape, test.shape"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((8708, 35), (2178, 35))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fWBmd76HToVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73fa15a5-dcac-43f6-886e-f2d6f0273d6a"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6966, 34)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XnkYDG0p57mK",
        "outputId": "590191fa-0d9a-4e9f-ccd8-0b3da4a97ecc"
      },
      "source": [
        "y_dev"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1226     14.0\n",
              "2893    230.0\n",
              "6596     60.0\n",
              "2648    676.0\n",
              "1737     19.0\n",
              "        ...  \n",
              "2999    286.0\n",
              "1803    106.0\n",
              "3133    123.0\n",
              "4304    271.0\n",
              "1153     30.0\n",
              "Name: Total_Booking, Length: 1742, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NQ_V806v7ITs"
      },
      "source": [
        "y_dev = y_dev.fillna(value= y_dev.mean())"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wO1MpJzD6fZp",
        "outputId": "f1c75b0f-1238-481f-bbab-67669f48f1af"
      },
      "source": [
        "y_dev.isnull().any()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tF0Vu-4nNI68"
      },
      "source": [
        "# cols = ['Year','Month','Weekday','season','weather','Hours']\r\n",
        "# for i in cols:\r\n",
        "#   print(df_train[i].unique(),'Unique Train')\r\n",
        "#   print(df_test[i].unique(),'Unique Test\\n')\r\n",
        "\r\n",
        "# df_train['Year'].replace({2011:0,2012:1},inplace = True)\r\n",
        "# df_test['Year'].replace({2011:0,2012:1},inplace = True)\r\n",
        "\r\n",
        "# df_train['Month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug':8,'Sep':9,'Oct':10,'Nov':11,'Dec':12},inplace = True)\r\n",
        "# df_test['Month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug':8,'Sep':9,'Oct':10,'Nov':11,'Dec':12},inplace = True)\r\n",
        "\r\n",
        "# df_train['Weekday'].replace({'Sunday':1,'Monday':2,'Tuesday':3,'Wednesday':4,'Thursday':5,'Friday':6,'Saturday':7},inplace = True)\r\n",
        "# df_test['Weekday'].replace({'Sunday':1,'Monday':2,'Tuesday':3,'Wednesday':4,'Thursday':5,'Friday':6,'Saturday':7},inplace = True)\r\n",
        "\r\n",
        "# df_train['season'].replace({'Spring':1,'Summer':2,'Fall':3,'Winter':4},inplace = True)\r\n",
        "# df_test['season'].replace({'Spring':1,'Summer':2,'Fall':3,'Winter':4},inplace = True)\r\n",
        "\r\n",
        "# df_train['weather'].replace({' Clear + Few clouds':0,' Light Snow, Light Rain':1,' Mist + Cloudy ':2,' Heavy Rain + Thunderstorm ':3},inplace = True)\r\n",
        "# df_test['weather'].replace({' Clear + Few clouds':0,' Light Snow, Light Rain':1,' Mist + Cloudy ':2,' Heavy Rain + Thunderstorm ':3},inplace = True)\r\n",
        "\r\n",
        "# # df_train['Hours'].replace({'Early Morning':1,'Office Hour':2,'Morning':3,'Afternoon':4,'Return From Office':5,'Late Night':6},inplace = True)\r\n",
        "# # df_test['Hours'].replace({'Early Morning':1,'Office Hour':2,'Morning':3,'Afternoon':4,'Return From Office':5,'Late Night':6},inplace = True)\r\n",
        "# print('<><><><><><><><><><><><><><><><><><><><><>\\n')\r\n",
        "# print(df_train.head())\r\n",
        "# print(df_test.head())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7iwFwXjI2_TK"
      },
      "source": [
        "##regression\r\n",
        "from sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\r\n",
        "from sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\r\n",
        "from sklearn.svm import SVR\r\n",
        "from sklearn.neighbors import KNeighborsRegressor\r\n",
        "\r\n",
        "#evaluation metrics\r\n",
        "from sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "models=[RandomForestRegressor(),AdaBoostRegressor(),BaggingRegressor(),SVR(),KNeighborsRegressor()]\r\n",
        "model_names=['RandomForestRegressor','AdaBoostRegressor','BaggingRegressor','SVR','KNeighborsRegressor']\r\n",
        "rmsle=[]\r\n",
        "d={}\r\n",
        "for model in range (len(models)):\r\n",
        "    clf=models[model]\r\n",
        "    clf.fit(x_train,y_train)\r\n",
        "    test_pred=clf.predict(x_dev)\r\n",
        "    #print(test_pred)\r\n",
        "    rmsle.append(np.sqrt(mean_squared_log_error(test_pred,y_dev)))\r\n",
        "d={'Modelling Algo':model_names,'RMSLE':rmsle}"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EU_EB91I2_V7",
        "outputId": "a3c929d7-7a42-4741-c845-022411eb8b94"
      },
      "source": [
        "d"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Modelling Algo': ['RandomForestRegressor',\n",
              "  'AdaBoostRegressor',\n",
              "  'BaggingRegressor',\n",
              "  'SVR',\n",
              "  'KNeighborsRegressor'],\n",
              " 'RMSLE': [1.5876733562101075,\n",
              "  1.6669636424384673,\n",
              "  1.613167031916508,\n",
              "  1.4622071809707184,\n",
              "  1.5833279139345384]}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "djGvgiSY7ayY"
      },
      "source": [
        "#model selection\r\n",
        "from sklearn.model_selection import train_test_split,cross_validate\r\n",
        "from sklearn.model_selection import KFold\r\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0QI1roPC2_YU",
        "outputId": "8b78206b-96b7-4963-efba-14c13797f779"
      },
      "source": [
        "#for random forest regresion.\r\n",
        "no_of_test=[300, 500, 700]\r\n",
        "params_dict={'n_estimators':no_of_test,'n_jobs':[-1],'max_features':[\"auto\",'sqrt','log2']}\r\n",
        "clf_rf=GridSearchCV(estimator=RandomForestRegressor(),param_grid=params_dict,scoring='neg_mean_squared_log_error')\r\n",
        "clf_rf.fit(x_train,y_train)\r\n",
        "pred=clf_rf.predict(x_dev)\r\n",
        "print((np.sqrt(mean_squared_log_error(pred,y_dev))))"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.577122418539524\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nlMuSX9fFojo"
      },
      "source": [
        "Thus we can conclude that the best estimator model can be developed using Random Forest."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "emQYsfMOFwbq",
        "outputId": "d91f837d-469c-4306-bbd5-a65842b08862"
      },
      "source": [
        "print(clf_rf.best_estimator_)\r\n",
        "print(clf_rf.best_params_)\r\n",
        "print(clf_rf.best_score_)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n",
            "                      max_depth=None, max_features='log2', max_leaf_nodes=None,\n",
            "                      max_samples=None, min_impurity_decrease=0.0,\n",
            "                      min_impurity_split=None, min_samples_leaf=1,\n",
            "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
            "                      n_estimators=300, n_jobs=-1, oob_score=False,\n",
            "                      random_state=None, verbose=0, warm_start=False)\n",
            "{'max_features': 'log2', 'n_estimators': 300, 'n_jobs': -1}\n",
            "-2.489857787440719\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dIisPTnzF6jX"
      },
      "source": [
        "The hyper tuning used Grid Search CV suggests the best paramters for the development of the model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2XD3WEmjGNV2",
        "outputId": "fae23175-17cd-4d36-81e3-7e7991d4423f"
      },
      "source": [
        "final_model = clf_rf.best_estimator_\r\n",
        "final_model.fit(x_train,y_train)\r\n",
        "pred=final_model.predict(x_dev)\r\n",
        "print((np.sqrt(mean_squared_log_error(pred,y_dev))))\r\n"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.5733973102494052\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OuUJ4wKzHsWh"
      },
      "source": [
        "Thus using the best estimator we can reduce the error from 1.577122418539524 to 1.5733973102494052"
      ]
    }
  ]
}